
# This is an example template file that can be processed by using the template
# expansion script "ExpandTemplate.ps1" (a simple template engine).
# In this file, line comments starting with # are used in order to provide 
# some context information.
# The file contains various kinds of placeholders, which can be understood and
# are substituted by the template engine to generate the text file (named as
# the current file, but without the .tmpl extension).
# This template file contain various kinds of placeholders (to substitute 
# environment variables or user-provided variables in form of user variables
# (i.e., key-value pairs), with different kinds of filters applied, or without
# filters).
# To generate the text file from this template, you can use PowerShell code 
# snippets provided by Samples_GenerateFileFromTemplate.ps1, which are related
# to this file. 

# ESCAPING DOUBLE BRACKETS:

{{ Escaped double curly brackets should transform to literal double brackets. }}

{{ {{ This should also works when escaped opening brackets are not matched...
  ... or when escaped closing brackets are not matched. }}

{{ Escaping with two slashes is also allowed, and it is an intermediate stage
in replacing the usual sequences {{ and }}. }}

# SIMPLE PLACEHOLDERS:

# Simple placeholders to substitute environment variables:
The value of environment variable ENVSIMPLE is EnvSimpleValue. The path
stored in ENVPATHWIN is:
  C:\Users\Uporabnik\Documents\MyDoc.md
On the other hand, the path stored in ENVPATHUNIX is:
  /home/uporabnik/doc/MyDoc.md

# Output values of all variables used:
Environment variables used in this template:
  ENVPATHWIN:  "C:\Users\Uporabnik\Documents\MyDoc.md"
  ENVPATHUNIX: "/home/uporabnik/doc/MyDoc.md"
  ENVSIMPLE:   "EnvSimpleValue"
  ENVLONGER:   "Value of the environment variable (longer)."
User-provided values (as variables) used in this template:
  MyVarSimple:       "NorthEast"
  MyVarLong:         "This is a longer "str", \ used to demonstrate composed filters.  "
  PathWin:           "C:\Program Files (x86)\Microsoft SQL Server\"
  PathUnix:          "~/doc/MyDoc.md"
  DirtyRelativePath: "../.\.\.//../users//\\/aa/./x.xml"
  DirtyAbsolutePath: "C:\users\\Uporabnik/.//..\Uporabnik/doc/\\/Mydoc.dox"
  EscapedStr:        "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
  EscapedStrSimple:  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ "
  ForUrlEncoding:    "Café Münchën!.#.$.&. .'.(.).*.+.,./.:.;.=.?.@.[.]"
  ForXMLEncoding:    ""Hello & Goodbye!"  5 < 6 & 7 > 4  <a id=e55>#e55</a>"


# Simple placeholders to substitute user-provided values (via variables):
The user-provided value of MyVarSimple is NorthEast. The quoted value 
of MyVarLong is: "This is a longer "str", \ used to demonstrate composed filters.  "

# PLACEHOLDERS WITH FILTERS to transform values:

# The regq filter replaces " with \" (escapes double quotes).
# Filter regesc filter replaces " with \" and \ with \\ (escapes double quotes
# and backslashes):
var.MyVarLong without filters:
  "This is a longer "str", \ used to demonstrate composed filters.  "
with filter | regq applied:
  "This is a longer \"str\", \ used to demonstrate composed filters.  "
with filter | regesc applied:
  "This is a longer \"str\", \\ used to demonstrate composed filters.  "

# The lower and upper filters change the case:
var.MyVarSimple:
  "NorthEast"
with  filter | lower :
  "northeast"
with  filter | upper :
  "NORTHEAST"

# The trim filter trims the leading and trailing whitespace:
var.MyVarLong without filters:
  "This is a longer "str", \ used to demonstrate composed filters.  "
with filter | trim :
  "This is a longer "str", \ used to demonstrate composed filters."

# The replace filter replaces a substring in the input string:
var.MyVarLong without filters:
  "This is a longer "str", \ used to demonstrate composed filters.  "
with filter | replace:"demonstrate":"show" :
  "This is a longer "str", \ used to show composed filters.  "
with filter | replace:"used to demonstrate":"demonstrating" :
  "This is a longer "str", \ demonstrating composed filters.  "

# The append and prepend filters append or prepend strings:
var.MyVarSimple:
  "NorthEast"
with  filter | append:" or North" :
  "NorthEast or North"
with  filter | prepend:"North-" :
  "North-NorthEast"

# TODO: Not yet implemented: filter arguments not in double quotes
with  filter | prepend:North :
  "{{ var.MyVarSimple | prepend:North }}"

# PATH FILTERS:

# The pathappend filter appends its argument to the path:
var.PathWin without filters:
  "C:\Program Files (x86)\Microsoft SQL Server\"
with filter | pathappend:"myfiles" :
  "C:\Program Files (x86)\Microsoft SQL Server\myfiles"
with filter | pathappend:"dir1\dir2\icon.png" :
  "C:\Program Files (x86)\Microsoft SQL Server\dir1\dir2\icon.png"

var.PathUnix:
  "~/doc/MyDoc.md"
with filter | pathappend:"dir1\dir2\icon.png" :
  "~/doc/MyDoc.mddir1\dir2\icon.png"

# The pathquote filter encloses a path in quotes, if not already enclosed:
env.ENVPATHWIN:
  "C:\Users\Uporabnik\Documents\MyDoc.md"
with filter | pathquote :
  ""C:\Users\Uporabnik\Documents\MyDoc.md""

# The pathwin, pathlinux, pathos, pathwinabs, pathlinuxabs, and pathosabs 
# convert paths to a clean canonical form for specific operating systems.
# Filters with "abs" suffix convert to absolute paths, and filters without
# "abs" suffix leave relative paths in relative form. Filters perform the 
# necessary conversion between slashes '/' and backslashes '\', replace 
# duplicate slashes or backslashes and redundant "/./" parts, resolve "../"
# in absolute paths, and for Linux forms, replace drive parts, e.g. "C:\"
# to "/c/".

var.DirtyRelativePath:
  "../.\.\.//../users//\\/aa/./x.xml"
with filter | pathwin :
  "..\..\users\aa\x.xml"
with filter | pathwinabs :
  "e:\wsorkspace\ws\other\iglibmodules\IGLibScripts\users\aa\x.xml"
with filter | pathlinux :
  "../../users/aa/x.xml"
with filter | pathlinuxabs :
  "/e/wsorkspace/ws/other/iglibmodules/IGLibScripts/users/aa/x.xml"
with filter | pathos :
  "../../users/aa/x.xml"
with filter | pathosabs :
  "/e/wsorkspace/ws/other/iglibmodules/IGLibScripts/users/aa/x.xml"

var.DirtyAbsolutePath:
  "C:\users\\Uporabnik/.//..\Uporabnik/doc/\\/Mydoc.dox"
with filter | pathwin :
  "C:\users\Uporabnik\..\Uporabnik\doc\Mydoc.dox"
with filter | pathwinabs :
  "C:\users\Uporabnik\doc\Mydoc.dox"
with filter | pathlinux :
  "/c/users/Uporabnik/../Uporabnik/doc/Mydoc.dox"
with filter | pathlinuxabs :
  "/c/users/Uporabnik/doc/Mydoc.dox"
with filter | pathos :
  "/c/users/Uporabnik/../Uporabnik/doc/Mydoc.dox"
with filter | pathosabs :
  "/c/users/Uporabnik/doc/Mydoc.dox"

# ENCODING / DECODING, ESCAPING, COMPRESSION filters

# These filters include urlencode / urldecode, xmlencode / xmldecode, 
# base64 / frombase64, hex / fromhex, escc / fromescc, 
# escjava / fromescjava, esccs / fromesccs
# In some cases, input or output can be binary. Where output is binary, 
# filters should be combined with filters that convert binary data to text,
# such as base64 or hex. For example, gzip produced binary result, and can
# be combined with base64 or hex, e.g. "| gzip | base64"; to restore to 
# string, we then use "| frombase64 | gunzip".

# URL encoding / decoding:
var.ForUrlEncoding:
  "Café Münchën!.#.$.&. .'.(.).*.+.,./.:.;.=.?.@.[.]"
with filter | urlencode :
  "Caf%C3%A9%20M%C3%BCnch%C3%ABn!.%23.%24.%26.%20.'.(.).*.%2B.%2C.%2F.%3A.%3B.%3D.%3F.%40.%5B.%5D"
round trip  | urlencode | urldecode :
  "Café Münchën!.#.$.&. .'.(.).*.+.,./.:.;.=.?.@.[.]"

# XML / HTML encoding / decoding:
var.ForXMLEncoding:
  ""Hello & Goodbye!"  5 < 6 & 7 > 4  <a id=e55>#e55</a>"
with filter | xmlencode :
  "&quot;Hello &amp; Goodbye!&quot;  5 &lt; 6 &amp; 7 &gt; 4  &lt;a id=e55&gt;#e55&lt;/a&gt;"
round trip  | xmlencode | xmldecode :
  ""Hello & Goodbye!"  5 < 6 & 7 > 4  <a id=e55>#e55</a>"

# ESCAPE SEQUENCES IN STRINGS:
# These filters provide conversion from strings with escape sequences in 
# different languages (C/C++, Java, C#) and back from strings to escaped 
# strings.
# WARNING: In some languages, conversion from strings to escaped strings is not
# unique because some characters can be escaped in different ways or not 
# escaped at all (e.g. in C#, due to forms \xH{1,4}, \uHHHH, \UHHHHHHHH).
# Tests usually start from escaped string (due to ease of representation in 
# PowerShell) and compare round-trip-filtered result (e.g. obtained with 
# filters "| fromesccs | esccs") with the initial escaped string. However,
# these strings are not necessarily equal even if all filters work correctly,
# because escaped representations are not unique, and double (round-trip)
# filters can start with one correct representation and end with another.
# To improve detection of errors, we can start with escaped string, applying
# unescaping, and then do the round trip with escaping and another unescaping,
# then compare the first unescaped string with the one obtained by the
# round-trip application of the additional pair of filters. Strings obtained
# in this way should always be equal.

# C/C++ -style escaping:
var.EscapedStr:
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
with filter | fromescc :
  "sq ' dq " bsl \ nl 
 cr  ht 	 vt  bsp  ff  null   nl 
 ETX  ACK  DEL  A A sp   ht 	 Z Z ! ! weird 䅂 ☺ ☺ ☃ ☃ π π A A gothicAhsa 𐌰 𐌰 rocket 🚀 🚀 cat 🐈 🐈"
round trip  | fromescc| escc  :
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \n ETX \u0003 ACK \u0006 DEL \u007F A A sp   ht \t Z Z ! ! weird \u4142 \u263A \u263A \u2603 \u2603 \u03C0 \u03C0 A A gothicAhsa \U00010330 \U00010330 rocket \U0001F680 \U0001F680 cat \U0001F408 \U0001F408"
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"

# These should be the same - fromescc vs. round trip +1:
  | fromescc    vs.
   fromescc | escc | fromescc 
  "sq ' dq " bsl \ nl 
 cr  ht 	 vt  bsp  ff  null   nl 
 ETX  ACK  DEL  A A sp   ht 	 Z Z ! ! weird 䅂 ☺ ☺ ☃ ☃ π π A A gothicAhsa 𐌰 𐌰 rocket 🚀 🚀 cat 🐈 🐈"
  "sq ' dq " bsl \ nl 
 cr  ht 	 vt  bsp  ff  null   nl 
 ETX  ACK  DEL  A A sp   ht 	 Z Z ! ! weird 䅂 ☺ ☺ ☃ ☃ π π A A gothicAhsa 𐌰 𐌰 rocket 🚀 🚀 cat 🐈 🐈"


# Java -style escaping:
var.EscapedStr:
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
with filter | fromescjava :
  "sq ' dq " bsl \ nl 
 cr  ht 	 vt \v bsp  ff  null   nl 
 ETX \x03 ACK \x06 DEL \x7F A A sp   ht \x09 Z \x5A ! \x21 weird \x4142 ☺ ☺ ☃ ☃ π π A A gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
round trip  | fromescjava| escjava  :
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \\v bsp \b ff \f null \u0000 nl \n ETX \\x03 ACK \\x06 DEL \\x7F A A sp   ht \\x09 Z \\x5A ! \\x21 weird \\x4142 \u263A \u263A \u2603 \u2603 \u03C0 \u03C0 A A gothicAhsa \uD800\uDF30 \\U00010330 rocket \uD83D\uDE80 \\U0001F680 cat \uD83D\uDC08 \\U0001F408"
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"

# These should be the same - fromescjava vs. round trip +1:
  | fromescjava    vs.
   fromescjava | escjava | fromescjava 
  "sq ' dq " bsl \ nl 
 cr  ht 	 vt \v bsp  ff  null   nl 
 ETX \x03 ACK \x06 DEL \x7F A A sp   ht \x09 Z \x5A ! \x21 weird \x4142 ☺ ☺ ☃ ☃ π π A A gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
  "sq ' dq " bsl \ nl 
 cr  ht 	 vt \v bsp  ff  null   nl 
 ETX \x03 ACK \x06 DEL \x7F A A sp   ht \x09 Z \x5A ! \x21 weird \x4142 ☺ ☺ ☃ ☃ π π A A gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"


# C# -style escaping (simple string):
var.EscapedStrSimple:
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ "
with filter | fromesccs :
  "sq ' dq " bsl \ nl 
 cr  ht 	 vt  bsp  ff  null   nl  12 A \101 sp  40 ht 	 Z Z ! ! weird 䅂 ☺ ☺ ☃ "
round trip  | fromesccs | esccs  (+ original for comparison):
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 A \\101 sp \040 ht \t Z Z ! ! weird \u4142 \u263A \u263A \u2603 "
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ "

# Round trip that starts with an escaped string may not result in
# the initial string due to non-uniquess: in escaped strings, Documents
# characters can be represented in multiple ways.
# But these should be the same - fromesccs vs. round trip +1:
  | fromesccs    vs.
   fromesccs | esccs | fromesccs 
  "sq ' dq " bsl \ nl 
 cr  ht 	 vt  bsp  ff  null   nl  12 A \101 sp  40 ht 	 Z Z ! ! weird 䅂 ☺ ☺ ☃ "
  "sq ' dq " bsl \ nl 
 cr  ht 	 vt  bsp  ff  null   nl  12 A \101 sp  40 ht 	 Z Z ! ! weird 䅂 ☺ ☺ ☃ "

# C# -style escaping with more complex string:
var.EscapedStr:
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
with filter | fromesccs :
  "sq ' dq " bsl \ nl 
 cr  ht 	 vt  bsp  ff  null   nl  12 ETX  ACK  DEL  A \101 sp  40 ht 	 Z Z ! ! weird 䅂 ☺ ☺ ☃ ☃ π π A A gothicAhsa 𐌰 𐌰 rocket 🚀 🚀 cat 🐈 🐈"
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
round trip | fromesccs | esccs  (+ original for comparison):
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \u0003 ACK \u0006 DEL \u007F A \\101 sp \040 ht \t Z Z ! ! weird \u4142 \u263A \u263A \u2603 \u2603 \u03C0 \u03C0 A A gothicAhsa \U00010330 \U00010330 rocket \U0001F680 \U0001F680 cat \U0001F408 \U0001F408"
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"

# These should be the same - fromesccs vs. round trip +1:
  | fromesccs    vs.
   fromesccs | esccs | fromesccs 
  "sq ' dq " bsl \ nl 
 cr  ht 	 vt  bsp  ff  null   nl  12 ETX  ACK  DEL  A \101 sp  40 ht 	 Z Z ! ! weird 䅂 ☺ ☺ ☃ ☃ π π A A gothicAhsa 𐌰 𐌰 rocket 🚀 🚀 cat 🐈 🐈"
  "sq ' dq " bsl \ nl 
 cr  ht 	 vt  bsp  ff  null   nl  12 ETX  ACK  DEL  A \101 sp  40 ht 	 Z Z ! ! weird 䅂 ☺ ☺ ☃ ☃ π π A A gothicAhsa 𐌰 𐌰 rocket 🚀 🚀 cat 🐈 🐈"


# Base64 encoding / decoding:
var.EscapedStr:
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
with filter | base64 :
  "cwBxACAAXAAnACAAZABxACAAXAAiACAAYgBzAGwAIABcAFwAIABuAGwAIABcAG4AIABjAHIAIABcAHIAIABoAHQAIABcAHQAIAB2AHQAIABcAHYAIABiAHMAcAAgAFwAYgAgAGYAZgAgAFwAZgAgAG4AdQBsAGwAIABcADAAIABuAGwAIABcADAAMQAyACAARQBUAFgAIABcAHgAMAAzACAAQQBDAEsAIABcAHgAMAA2ACAARABFAEwAIABcAHgANwBGACAAQQAgAFwAMQAwADEAIABzAHAAIABcADAANAAwACAAaAB0ACAAXAB4ADAAOQAgAFoAIABcAHgANQBBACAAIQAgAFwAeAAyADEAIAB3AGUAaQByAGQAIABcAHgANAAxADQAMgAgADomIABcAHUAMgA2ADMAQQAgAAMmIABcAHUAMgA2ADAAMwAgAMADIABcAHUAMAAzAEMAMAAgAEEAIABcAHUAMAAwADQAMQAgAGcAbwB0AGgAaQBjAEEAaABzAGEAIAAA2DDfIABcAFUAMAAwADAAMQAwADMAMwAwACAAcgBvAGMAawBlAHQAIAA92IDeIABcAFUAMAAwADAAMQBGADYAOAAwACAAYwBhAHQAIAA92AjcIABcAFUAMAAwADAAMQBGADQAMAA4AA=="
# Round trip conversion to Byte[] (needs additional conversion to string with | utf16)
round trip  | base64 | frombase64  (+ original for comparison):
  "115 0 113 0 32 0 92 0 39 0 32 0 100 0 113 0 32 0 92 0 34 0 32 0 98 0 115 0 108 0 32 0 92 0 92 0 32 0 110 0 108 0 32 0 92 0 110 0 32 0 99 0 114 0 32 0 92 0 114 0 32 0 104 0 116 0 32 0 92 0 116 0 32 0 118 0 116 0 32 0 92 0 118 0 32 0 98 0 115 0 112 0 32 0 92 0 98 0 32 0 102 0 102 0 32 0 92 0 102 0 32 0 110 0 117 0 108 0 108 0 32 0 92 0 48 0 32 0 110 0 108 0 32 0 92 0 48 0 49 0 50 0 32 0 69 0 84 0 88 0 32 0 92 0 120 0 48 0 51 0 32 0 65 0 67 0 75 0 32 0 92 0 120 0 48 0 54 0 32 0 68 0 69 0 76 0 32 0 92 0 120 0 55 0 70 0 32 0 65 0 32 0 92 0 49 0 48 0 49 0 32 0 115 0 112 0 32 0 92 0 48 0 52 0 48 0 32 0 104 0 116 0 32 0 92 0 120 0 48 0 57 0 32 0 90 0 32 0 92 0 120 0 53 0 65 0 32 0 33 0 32 0 92 0 120 0 50 0 49 0 32 0 119 0 101 0 105 0 114 0 100 0 32 0 92 0 120 0 52 0 49 0 52 0 50 0 32 0 58 38 32 0 92 0 117 0 50 0 54 0 51 0 65 0 32 0 3 38 32 0 92 0 117 0 50 0 54 0 48 0 51 0 32 0 192 3 32 0 92 0 117 0 48 0 51 0 67 0 48 0 32 0 65 0 32 0 92 0 117 0 48 0 48 0 52 0 49 0 32 0 103 0 111 0 116 0 104 0 105 0 99 0 65 0 104 0 115 0 97 0 32 0 0 216 48 223 32 0 92 0 85 0 48 0 48 0 48 0 49 0 48 0 51 0 51 0 48 0 32 0 114 0 111 0 99 0 107 0 101 0 116 0 32 0 61 216 128 222 32 0 92 0 85 0 48 0 48 0 48 0 49 0 70 0 54 0 56 0 48 0 32 0 99 0 97 0 116 0 32 0 61 216 8 220 32 0 92 0 85 0 48 0 48 0 48 0 49 0 70 0 52 0 48 0 56 0"
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"

# Round trip conversions back to string:
round trip  | base64 | strfrombase64  (+ original for comparison):
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
round trip  | base64 | frombase64 | utf16  (+ original for comparison):
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
round trip  | base64 | frombase64:"utf16"  (+ original for comparison):
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"

# Types of various results:
Type after applying  | base64 :
      System.String
Type after applying | base64 | frombase64  (problematic before, should be Byte[]):
      System.Byte[]
Type after applying | base64 | frombase64 | utf16 :
      System.String
Type after applying | base64 | frombase64:"utf16" :
      System.String
Type after applying | base64 | strfrombase64 :
      System.String

with filter | base64 | strfrombase64 | base64 :
  "cwBxACAAXAAnACAAZABxACAAXAAiACAAYgBzAGwAIABcAFwAIABuAGwAIABcAG4AIABjAHIAIABcAHIAIABoAHQAIABcAHQAIAB2AHQAIABcAHYAIABiAHMAcAAgAFwAYgAgAGYAZgAgAFwAZgAgAG4AdQBsAGwAIABcADAAIABuAGwAIABcADAAMQAyACAARQBUAFgAIABcAHgAMAAzACAAQQBDAEsAIABcAHgAMAA2ACAARABFAEwAIABcAHgANwBGACAAQQAgAFwAMQAwADEAIABzAHAAIABcADAANAAwACAAaAB0ACAAXAB4ADAAOQAgAFoAIABcAHgANQBBACAAIQAgAFwAeAAyADEAIAB3AGUAaQByAGQAIABcAHgANAAxADQAMgAgADomIABcAHUAMgA2ADMAQQAgAAMmIABcAHUAMgA2ADAAMwAgAMADIABcAHUAMAAzAEMAMAAgAEEAIABcAHUAMAAwADQAMQAgAGcAbwB0AGgAaQBjAEEAaABzAGEAIAAA2DDfIABcAFUAMAAwADAAMQAwADMAMwAwACAAcgBvAGMAawBlAHQAIAA92IDeIABcAFUAMAAwADAAMQBGADYAOAAwACAAYwBhAHQAIAA92AjcIABcAFUAMAAwADAAMQBGADQAMAA4AA=="
with filter | base64 | strfrombase64 | base64 :
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"

with filter | base64 | frombase64 | utf16 | base64 :
  "cwBxACAAXAAnACAAZABxACAAXAAiACAAYgBzAGwAIABcAFwAIABuAGwAIABcAG4AIABjAHIAIABcAHIAIABoAHQAIABcAHQAIAB2AHQAIABcAHYAIABiAHMAcAAgAFwAYgAgAGYAZgAgAFwAZgAgAG4AdQBsAGwAIABcADAAIABuAGwAIABcADAAMQAyACAARQBUAFgAIABcAHgAMAAzACAAQQBDAEsAIABcAHgAMAA2ACAARABFAEwAIABcAHgANwBGACAAQQAgAFwAMQAwADEAIABzAHAAIABcADAANAAwACAAaAB0ACAAXAB4ADAAOQAgAFoAIABcAHgANQBBACAAIQAgAFwAeAAyADEAIAB3AGUAaQByAGQAIABcAHgANAAxADQAMgAgADomIABcAHUAMgA2ADMAQQAgAAMmIABcAHUAMgA2ADAAMwAgAMADIABcAHUAMAAzAEMAMAAgAEEAIABcAHUAMAAwADQAMQAgAGcAbwB0AGgAaQBjAEEAaABzAGEAIAAA2DDfIABcAFUAMAAwADAAMQAwADMAMwAwACAAcgBvAGMAawBlAHQAIAA92IDeIABcAFUAMAAwADAAMQBGADYAOAAwACAAYwBhAHQAIAA92AjcIABcAFUAMAAwADAAMQBGADQAMAA4AA=="
with filter | base64 | frombase64 | utf16 | base64 :
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"


# Hexadecimal encoding / decoding:
var.EscapedStr:
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
with filter | hex :
  "7300710020005c00270020006400710020005c0022002000620073006c0020005c005c0020006e006c0020005c006e0020006300720020005c00720020006800740020005c00740020007600740020005c007600200062007300700020005c00620020006600660020005c00660020006e0075006c006c0020005c00300020006e006c0020005c00300031003200200045005400580020005c007800300033002000410043004b0020005c007800300036002000440045004c0020005c007800370046002000410020005c0031003000310020007300700020005c0030003400300020006800740020005c0078003000390020005a0020005c007800350041002000210020005c0078003200310020007700650069007200640020005c007800340031003400320020003a2620005c00750032003600330041002000032620005c00750032003600300033002000c00320005c00750030003300430030002000410020005c0075003000300034003100200067006f0074006800690063004100680073006100200000d830df20005c00550030003000300031003000330033003000200072006f0063006b006500740020003dd880de20005c00550030003000300031004600360038003000200063006100740020003dd808dc20005c00550030003000300031004600340030003800"
# Round trip conversion to Byte[] (needs additional conversion to string with | utf16)
round trip  | hex | fromhex  (+ original for comparison):
  "115 0 113 0 32 0 92 0 39 0 32 0 100 0 113 0 32 0 92 0 34 0 32 0 98 0 115 0 108 0 32 0 92 0 92 0 32 0 110 0 108 0 32 0 92 0 110 0 32 0 99 0 114 0 32 0 92 0 114 0 32 0 104 0 116 0 32 0 92 0 116 0 32 0 118 0 116 0 32 0 92 0 118 0 32 0 98 0 115 0 112 0 32 0 92 0 98 0 32 0 102 0 102 0 32 0 92 0 102 0 32 0 110 0 117 0 108 0 108 0 32 0 92 0 48 0 32 0 110 0 108 0 32 0 92 0 48 0 49 0 50 0 32 0 69 0 84 0 88 0 32 0 92 0 120 0 48 0 51 0 32 0 65 0 67 0 75 0 32 0 92 0 120 0 48 0 54 0 32 0 68 0 69 0 76 0 32 0 92 0 120 0 55 0 70 0 32 0 65 0 32 0 92 0 49 0 48 0 49 0 32 0 115 0 112 0 32 0 92 0 48 0 52 0 48 0 32 0 104 0 116 0 32 0 92 0 120 0 48 0 57 0 32 0 90 0 32 0 92 0 120 0 53 0 65 0 32 0 33 0 32 0 92 0 120 0 50 0 49 0 32 0 119 0 101 0 105 0 114 0 100 0 32 0 92 0 120 0 52 0 49 0 52 0 50 0 32 0 58 38 32 0 92 0 117 0 50 0 54 0 51 0 65 0 32 0 3 38 32 0 92 0 117 0 50 0 54 0 48 0 51 0 32 0 192 3 32 0 92 0 117 0 48 0 51 0 67 0 48 0 32 0 65 0 32 0 92 0 117 0 48 0 48 0 52 0 49 0 32 0 103 0 111 0 116 0 104 0 105 0 99 0 65 0 104 0 115 0 97 0 32 0 0 216 48 223 32 0 92 0 85 0 48 0 48 0 48 0 49 0 48 0 51 0 51 0 48 0 32 0 114 0 111 0 99 0 107 0 101 0 116 0 32 0 61 216 128 222 32 0 92 0 85 0 48 0 48 0 48 0 49 0 70 0 54 0 56 0 48 0 32 0 99 0 97 0 116 0 32 0 61 216 8 220 32 0 92 0 85 0 48 0 48 0 48 0 49 0 70 0 52 0 48 0 56 0"
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"

# Round trip conversions back to string:
round trip  | hex | strfromhex  (+ original for comparison):
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
round trip  | hex | fromhex | utf16  (+ original for comparison):
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
round trip  | hex | fromhex:"utf16"  (+ original for comparison):
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"

# Types of various results:
Type after applying  | hex :
      System.String
Type after applying | hex | fromhex  (problematic before, should be Byte[]):
      System.Byte[]
Type after applying | hex | fromhex | utf16 :
      System.String
Type after applying | hex | fromhex:"utf16" :
      System.String
Type after applying | hex | strfromhex :
      System.String

# COMPRESSION / decompression (gzip and gunzip):

# gzip / gunzip of a simple string:
var.PathWin:
  "C:\Program Files (x86)\Microsoft SQL Server\"
with filter | base64 :
  "UQB3AEEANgBBAEYAdwBBAFUAQQBCAHkAQQBHADgAQQBaAHcAQgB5AEEARwBFAEEAYgBRAEEAZwBBAEUAWQBBAGEAUQBCAHMAQQBHAFUAQQBjAHcAQQBnAEEAQwBnAEEAZQBBAEEANABBAEQAWQBBAEsAUQBCAGMAQQBFADAAQQBhAFEAQgBqAEEASABJAEEAYgB3AEIAegBBAEcAOABBAFoAZwBCADAAQQBDAEEAQQBVAHcAQgBSAEEARQB3AEEASQBBAEIAVABBAEcAVQBBAGMAZwBCADIAQQBHAFUAQQBjAGcAQgBjAEEAQQA9AD0A"
with filter | gzip | base64 :
  "H4sIAAAAAAAEAHNmsGKIYQhgKGLIZ0gHkokMuQwKDG4MmQw5DKkMxUC2BkMFgwWDGYMmUJ0vUDwZrLYYiNMYSoDywQyBDD5gOhUoUwYmYxgA0Nf1rVgAAAA="
# Round trip conversion to Byte[] (needs additional conversion to string
# with | utf16)
round trip | gzip | gunzip (+ original for comparison):
  "67 0 58 0 92 0 80 0 114 0 111 0 103 0 114 0 97 0 109 0 32 0 70 0 105 0 108 0 101 0 115 0 32 0 40 0 120 0 56 0 54 0 41 0 92 0 77 0 105 0 99 0 114 0 111 0 115 0 111 0 102 0 116 0 32 0 83 0 81 0 76 0 32 0 83 0 101 0 114 0 118 0 101 0 114 0 92 0"
  "C:\Program Files (x86)\Microsoft SQL Server\"

# Round trip conversions - zip and back to string:
round trip | gzip | strgunzip  (+ original for comparison):
  "C:\Program Files (x86)\Microsoft SQL Server\"
  "C:\Program Files (x86)\Microsoft SQL Server\"
round trip | gzip | gunzip | utf16  (+ original for comparison):
  "C:\Program Files (x86)\Microsoft SQL Server\"
  "C:\Program Files (x86)\Microsoft SQL Server\"
round trip | gzip | gunzip:"utf16"  (+ original for comparison):
  "C:\Program Files (x86)\Microsoft SQL Server\"
  "C:\Program Files (x86)\Microsoft SQL Server\"

# gzip / gunzip of more complex string (EscapedStr, includes UTF pictographs
# like emojis, even outside the Basic Multilingual Plane)
var.EscapedStr:
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
with filter | base64 :
  "cwBxACAAXAAnACAAZABxACAAXAAiACAAYgBzAGwAIABcAFwAIABuAGwAIABcAG4AIABjAHIAIABcAHIAIABoAHQAIABcAHQAIAB2AHQAIABcAHYAIABiAHMAcAAgAFwAYgAgAGYAZgAgAFwAZgAgAG4AdQBsAGwAIABcADAAIABuAGwAIABcADAAMQAyACAARQBUAFgAIABcAHgAMAAzACAAQQBDAEsAIABcAHgAMAA2ACAARABFAEwAIABcAHgANwBGACAAQQAgAFwAMQAwADEAIABzAHAAIABcADAANAAwACAAaAB0ACAAXAB4ADAAOQAgAFoAIABcAHgANQBBACAAIQAgAFwAeAAyADEAIAB3AGUAaQByAGQAIABcAHgANAAxADQAMgAgADomIABcAHUAMgA2ADMAQQAgAAMmIABcAHUAMgA2ADAAMwAgAMADIABcAHUAMAAzAEMAMAAgAEEAIABcAHUAMAAwADQAMQAgAGcAbwB0AGgAaQBjAEEAaABzAGEAIAAA2DDfIABcAFUAMAAwADAAMQAwADMAMwAwACAAcgBvAGMAawBlAHQAIAA92IDeIABcAFUAMAAwADAAMQBGADYAOAAwACAAYwBhAHQAIAA92AjcIABcAFUAMAAwADAAMQBGADQAMAA4AA=="
#with filter | gzip | base64 :
  "H4sIAAAAAAAEAF1Qu24CQRCzRJPPOFKEdoELL4kCEWhCSSSEaOB4HAKRBAJJyaflMygQ/Aoe74JItNLI4/N4PLfBJyIMkGMdB/zIOsIGS3UD1lXAK9YEa2GrKb6Ere4C3oXpD3Uj1imf4amctvTybu7O2SGPAlELXfTE/JArEjXQxOuNKRG9UNUJTBltaazLyyW67XaIteOa0uarRP3QPWsuG7qCZr8xwZy3jQMbk42VrPZkzJa4xFw2mbljfNbfjGesa2q3T2aMk1eEGd6ZJ+WWhF9Tph2SxcGdTfkmpdMtRT7zWHMiwYLJ7I76YX/6q2xzf0XKhF5e83D8r7F/UcEFdRUYZvABAAA="
 Round trip conversion to Byte[] (needs additional conversion to string
# with | utf16)
round trip | gzip | gunzip (+ original for comparison):
  "115 0 113 0 32 0 92 0 39 0 32 0 100 0 113 0 32 0 92 0 34 0 32 0 98 0 115 0 108 0 32 0 92 0 92 0 32 0 110 0 108 0 32 0 92 0 110 0 32 0 99 0 114 0 32 0 92 0 114 0 32 0 104 0 116 0 32 0 92 0 116 0 32 0 118 0 116 0 32 0 92 0 118 0 32 0 98 0 115 0 112 0 32 0 92 0 98 0 32 0 102 0 102 0 32 0 92 0 102 0 32 0 110 0 117 0 108 0 108 0 32 0 92 0 48 0 32 0 110 0 108 0 32 0 92 0 48 0 49 0 50 0 32 0 69 0 84 0 88 0 32 0 92 0 120 0 48 0 51 0 32 0 65 0 67 0 75 0 32 0 92 0 120 0 48 0 54 0 32 0 68 0 69 0 76 0 32 0 92 0 120 0 55 0 70 0 32 0 65 0 32 0 92 0 49 0 48 0 49 0 32 0 115 0 112 0 32 0 92 0 48 0 52 0 48 0 32 0 104 0 116 0 32 0 92 0 120 0 48 0 57 0 32 0 90 0 32 0 92 0 120 0 53 0 65 0 32 0 33 0 32 0 92 0 120 0 50 0 49 0 32 0 119 0 101 0 105 0 114 0 100 0 32 0 92 0 120 0 52 0 49 0 52 0 50 0 32 0 58 38 32 0 92 0 117 0 50 0 54 0 51 0 65 0 32 0 3 38 32 0 92 0 117 0 50 0 54 0 48 0 51 0 32 0 192 3 32 0 92 0 117 0 48 0 51 0 67 0 48 0 32 0 65 0 32 0 92 0 117 0 48 0 48 0 52 0 49 0 32 0 103 0 111 0 116 0 104 0 105 0 99 0 65 0 104 0 115 0 97 0 32 0 0 216 48 223 32 0 92 0 85 0 48 0 48 0 48 0 49 0 48 0 51 0 51 0 48 0 32 0 114 0 111 0 99 0 107 0 101 0 116 0 32 0 61 216 128 222 32 0 92 0 85 0 48 0 48 0 48 0 49 0 70 0 54 0 56 0 48 0 32 0 99 0 97 0 116 0 32 0 61 216 8 220 32 0 92 0 85 0 48 0 48 0 48 0 49 0 70 0 52 0 48 0 56 0"
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"

# Round trip conversions - zip and back to string:
round trip | gzip | strgunzip  (+ original for comparison):
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
round trip | gzip | gunzip | utf16  (+ original for comparison):
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
round trip | gzip | gunzip:"utf16"  (+ original for comparison):
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"
  "sq \' dq \" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 ETX \x03 ACK \x06 DEL \x7F A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ☺ \u263A ☃ \u2603 π \u03C0 A \u0041 gothicAhsa 𐌰 \U00010330 rocket 🚀 \U0001F680 cat 🐈 \U0001F408"

# The gunzip filter with additional argument "utf8" is NOT implemented
# (and there are currently no plans to implement it), and woulld throw:
round trip | gzip | gunzip:"utf8"  (+ original for comparison):
  "{{ var.EscapedStr | gzip | gunzip:"utf8" \}}"
  "{{ var.EscapedStr }}"

# MULTIPLE FILTERS:

# Multiple filters can be applied to the initial string in order to produce
# the final string with which the placeholder is substituted. Filters are 
# applied from left to right.
var.PathWin without filters:
  "C:\Program Files (x86)\Microsoft SQL Server\"
with filters | pathappend:"dir1\dir2\icon.png" | replace:"\\":"/" :
  "C:/Program Files (x86)/Microsoft SQL Server/dir1/dir2/icon.png"
different order of the same filters can give different results:
with filters | replace:"\\":"/" | pathappend:"dir1\dir2\icon.png" :
  "C:/Program Files (x86)/Microsoft SQL Server/dir1\dir2\icon.png"
more than two filters:
with filters | pathappend:"dir1\dir2\icon.png" | replace:"\\":"/" | prepend:"The path is: " :
  "The path is: C:/Program Files (x86)/Microsoft SQL Server/dir1/dir2/icon.png"

# HANDLING SPACES AND NEWLINES IN PLACEHOLDERS:

# Spaces and newlines within placeholders should not make any difference. 
# This section tests that this is true.

# Spaces in simple placeholders:

Without spaces:
The value of user-defined variable MyVarSimple: "NorthEast"
With space on one side:
The value of user-defined variable MyVarSimple: "NorthEast"
With multiple spaces on both sides: 
The value of user-defined variable MyVarSimple: "NorthEast"
With newline right after open brackets:
The value of user-defined variable MyVarSimple: "NorthEast"
With several newlines:
The value of user-defined variable MyVarSimple: "NorthEast"

# Spaces in placeholders with filters:

var.PathWin without filters:
  "C:\Program Files (x86)\Microsoft SQL Server\"
with three filters, | pathappend:"dir1\dir2\icon.png" | replace:"\\":"/" | prepend:"The path is: " :
  "The path is: C:/Program Files (x86)/Microsoft SQL Server/dir1/dir2/icon.png"
with no spaces:
  "The path is: C:/Program Files (x86)/Microsoft SQL Server/dir1/dir2/icon.png"
with spaces removed even around filter signs ():
  "The path is: C:/Program Files (x86)/Microsoft SQL Server/dir1/dir2/icon.png"
with newline after opening parentheses:
  "The path is: C:/Program Files (x86)/Microsoft SQL Server/dir1/dir2/icon.png"
with newlines after opening and before closing parentheses:
  "The path is: C:/Program Files (x86)/Microsoft SQL Server/dir1/dir2/icon.png"
with newlines also between pipes (at various places):
  "The path is: C:/Program Files (x86)/Microsoft SQL Server/dir1/dir2/icon.png"


# The following environment variables need to be defined for successful
# generation (suggested values are also provided):
#   ENVPATHWIN = C:\Users\Uporabnik\Documents\MyDoc.md
#   ENVPATHUNIX = /home/uporabnik/doc/MyDoc.md
#   ENVSIMPLE = EnvSimpleValue
#   ENVLONGER = Value ot the environment variable (longer)
# The following user-provided variables need to be defined:
#   MyVarSimple = NorthEast
#   MyVarLong = '  This is a longer "str", \ used to demonstrate composed filters.  '
#   PathWin = C:\Program Files (x86)\Microsoft SQL Server\
#   PathUnix = ~/doc/MyDoc.md
#   DirtyRelativePath = "../.\.\.//../users//\\/aa/./x.xml"
#   DirtyAbsolutePath = "C:\users\\Uporabnik/.//..\Uporabnik/doc/\\/Mydoc.dox"
#   EscapedStr = "sq \' dq \`" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 â˜º \u263A â˜ƒ \u2603 Ï€ \u03C0 A \u0041 gothicAhsa ðŒ° \U00010330 rocket ðŸš€ \U0001F680 cat ðŸˆ \U0001F408"
#   EscapedStrSimple = "sq \' dq \`" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 â˜º \u263A â˜ƒ "
#   ForUrlEncoding = "CafÃ© MÃ¼nchÃ«n!.#.$.&. .'.(.).*.+.,./.:.;.=.?.@.[.]"
#   ForXMLEncoding = "`"Hello & Goodbye!`"  5 < 6 & 7 > 4  <a id=e55>#e55</a>"



