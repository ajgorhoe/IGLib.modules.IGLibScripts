
# This is an example template file that can be processed by using the template
# expansion script "ExpandTemplate.ps1" (a simple template engine).
# In this file, line comments starting with # are used in order to provide 
# some context information.
# The file contains various kinds of placeholders, which can be understood and
# are substituted by the template engine to generate the text file (named as
# the current file, but without the .tmpl extension).
# This template file contain various kinds of placeholders (to substitute 
# environment variables or user-provided variables in form of user variables
# (i.e., key-value pairs), with different kinds of filters applied, or without
# filters).
# To generate the text file from this template, you can use PowerShell code 
# snippets provided by Samples_GenerateFileFromTemplate.ps1, which are related
# to this file. 

# ESCAPING DOUBLE BRACKETS:

\{{ Escaped double curly brackets should transform to literal double brackets. \}}
\{{ \{{ This should also works when escaped opening brackets are not matched...
  ... or when escaped closing brackets are not matched. \}}

# SIMPLE PLACEHOLDERS:

# Simple placeholders to substitute environment variables:
The value of environment variable ENVSIMPLE is {{ env.ENVSIMPLE }}. The path
stored in ENVPATHWIN is:
  {{ env.ENVPATHWIN }}
On the other hand, the path stored in ENVPATHUNIX is:
  {{ env.ENVPATHUNIX }}

# Output values of all variables used:
Environment variables used in this template:
  ENVPATHWIN:  "{{env.ENVPATHWIN}}"
  ENVPATHUNIX: "{{env.ENVPATHUNIX}}"
  ENVSIMPLE:   "{{env.ENVSIMPLE}}"
  ENVLONGER:   "{{env.ENVLONGER}}"
User-provided values (as variables) used in this template:
  MyVarSimple:       "{{var.MyVarSimple}}"
  MyVarLong:         "{{var.MyVarLong}}"
  PathWin:           "{{var.PathWin}}"
  PathUnix:          "{{var.PathUnix}}"
  DirtyRelativePath: "{{var.DirtyRelativePath}}"
  DirtyAbsolutePath: "{{var.DirtyAbsolutePath}}"
  EscapedStr:        "{{var.EscapedStr}}"
  ForUrlEncoding:    "{{var.ForUrlEncoding}}"
  ForXMLEncoding:    "{{var.ForXMLEncoding}}"


# Simple placeholders to substitute user-provided values (via variables):
The user-provided value of MyVarSimple is {{ var.MyVarSimple }}. The quoted value 
of MyVarLong is: "{{ var.MyVarLong }}"

# PLACEHOLDERS WITH FILTERS to transform values:

# The regq filter replaces " with \" (escapes double quotes).
# Filter regesc filter replaces " with \" and \ with \\ (escapes double quotes
# and backslashes):
var.MyVarLong without filters:
  "{{ var.MyVarLong }}"
with filter | regq applied:
  "{{ var.MyVarLong | regq }}"
with filter | regesc applied:
  "{{ var.MyVarLong | regesc }}"

# The lower and upper filters change the case:
var.MyVarSimple:
  "{{ var.MyVarSimple }}"
with  filter | lower :
  "{{ var.MyVarSimple | lower }}"
with  filter | upper :
  "{{ var.MyVarSimple | upper }}"

# The trim filter trims the leading and trailing whitespace:
var.MyVarLong without filters:
  "{{ var.MyVarLong }}"
with filter | trim :
  "{{ var.MyVarLong | trim }}"

# The replace filter replaces a substring in the input string:
var.MyVarLong without filters:
  "{{ var.MyVarLong }}"
with filter | replace:"demonstrate":"show" :
  "{{ var.MyVarLong | replace:"demonstrate":"show" }}"
with filter | replace:"used to demonstrate":"demonstrating" :
  "{{ var.MyVarLong | replace:"used to demonstrate":"demonstrating" }}"

# The append and prepend filters append or prepend strings:
var.MyVarSimple:
  "{{ var.MyVarSimple }}"
with  filter | append:" or North" :
  "{{ var.MyVarSimple | append:" or North" }}"
with  filter | prepend:"North-" :
  "{{ var.MyVarSimple | prepend:"North-" }}"

# TODO: Not yet implemented: filter arguments not in double quotes
with  filter | prepend:North :
  "\{{ var.MyVarSimple | prepend:North \}}"

# PATH FILTERS:

# The pathappend filter appends its argument to the path:
var.PathWin without filters:
  "{{ var.PathWin }}"
with filter | pathappend:"myfiles" :
  "{{ var.PathWin | pathappend:"myfiles" }}"
with filter | pathappend:"dir1\dir2\icon.png" :
  "{{ var.PathWin | pathappend:"dir1\dir2\icon.png" }}"

var.PathUnix:
  "{{ var.PathUnix }}"
with filter | pathappend:"dir1\dir2\icon.png" :
  "{{ var.PathUnix | pathappend:"dir1\dir2\icon.png" }}"

# The pathquote filter encloses a path in quotes, if not already enclosed:
env.ENVPATHWIN:
  "{{ env.ENVPATHWIN }}"
with filter | pathquote :
  "{{ env.ENVPATHWIN | pathquote }}"

# The pathwin, pathlinux, pathos, pathwinabs, pathlinuxabs, and pathosabs 
# convert paths to a clean canonical form for specific operating systems.
# Filters with "abs" suffix convert to absolute paths, and filters without
# "abs" suffix leave relative paths in relative form. Filters perform the 
# necessary conversion between slashes '/' and backslashes '\', replace 
# duplicate slashes or backslashes and redundant "/./" parts, resolve "../"
# in absolute paths, and for Linux forms, replace drive parts, e.g. "C:\"
# to "/c/".

var.DirtyRelativePath:
  "{{ var.DirtyRelativePath }}"
with filter | pathwin :
  "{{ var.DirtyRelativePath | pathwin }}"
with filter | pathwinabs :
  "{{ var.DirtyRelativePath | pathwinabs }}"
with filter | pathlinux :
  "{{ var.DirtyRelativePath | pathlinux }}"
with filter | pathlinuxabs :
  "{{ var.DirtyRelativePath | pathlinuxabs }}"
with filter | pathos :
  "{{ var.DirtyRelativePath | pathos }}"
with filter | pathosabs :
  "{{ var.DirtyRelativePath | pathosabs }}"

var.DirtyAbsolutePath:
  "{{ var.DirtyAbsolutePath }}"
with filter | pathwin :
  "{{ var.DirtyAbsolutePath | pathwin }}"
with filter | pathwinabs :
  "{{ var.DirtyAbsolutePath | pathwinabs }}"
with filter | pathlinux :
  "{{ var.DirtyAbsolutePath | pathlinux }}"
with filter | pathlinuxabs :
  "{{ var.DirtyAbsolutePath | pathlinuxabs }}"
with filter | pathos :
  "{{ var.DirtyAbsolutePath | pathos }}"
with filter | pathosabs :
  "{{ var.DirtyAbsolutePath | pathosabs }}"

# MULTIPLE FILTERS:

# Multiple filters can be applied to the initial string in order to produce
# the final string with which the placeholder is substituted. Filters are 
# applied from left to right.
var.PathWin without filters:
  "{{ var.PathWin }}"
with filters | pathappend:"dir1\dir2\icon.png" | replace:"\\":"/" :
  "{{ var.PathWin | pathappend:"dir1\dir2\icon.png" | replace:"\\":"/" }}"
different order of the same filters can give different results:
with filters | replace:"\\":"/" | pathappend:"dir1\dir2\icon.png" :
  "{{ var.PathWin | replace:"\\":"/" | pathappend:"dir1\dir2\icon.png" }}"
more than two filters:
with filters | pathappend:"dir1\dir2\icon.png" | replace:"\\":"/" | prepend:"The path is: " :
  "{{ var.PathWin | pathappend:"dir1\dir2\icon.png" | replace:"\\":"/" | prepend:"The path is: " }}"

# HANDLING SPACES AND NEWLINES IN PLACEHOLDERS:

# Spaces and newlines within placeholders should not make any difference. 
# This section tests that this is true.

# Spaces in simple placeholders:

Without spaces:
The value of user-defined variable MyVarSimple: "{{var.MyVarSimple}}"
With space on one side:
The value of user-defined variable MyVarSimple: "{{ var.MyVarSimple}}"
With multiple spaces on both sides: 
The value of user-defined variable MyVarSimple: "{{  var.MyVarSimple   }}"
With newline right after open brackets:
The value of user-defined variable MyVarSimple: "{{
    var.MyVarSimple   }}"
With several newlines:
The value of user-defined variable MyVarSimple: "{{  
    var.MyVarSimple
    }}"

# Spaces in placeholders with filters:

var.PathWin without filters:
  "{{ var.PathWin }}"
with three filters, | pathappend:"dir1\dir2\icon.png" | replace:"\\":"/" | prepend:"The path is: " :
  "{{ var.PathWin | pathappend:"dir1\dir2\icon.png" | replace:"\\":"/" | prepend:"The path is: " }}"
with no spaces:
  "{{var.PathWin | pathappend:"dir1\dir2\icon.png" | replace:"\\":"/" | prepend:"The path is: "}}"
with spaces removed even around filter signs ():
  "{{var.PathWin|pathappend:"dir1\dir2\icon.png"|replace:"\\":"/"|prepend:"The path is: "}}"
with newline after opening parentheses:
  "{{
      var.PathWin | pathappend:"dir1\dir2\icon.png" | replace:"\\":"/" | prepend:"The path is: " }}"
with newlines after opening and before closing parentheses:
  "{{
      var.PathWin | pathappend:"dir1\dir2\icon.png" | replace:"\\":"/" | prepend:"The path is: "
  }}"
with newlines also between pipes (at various places):
  "{{
      var.PathWin
        | pathappend:"dir1\dir2\icon.png" | 
        replace:"\\":"/"
        |
        prepend:"The path is: "
  }}"


# The following environment variables need to be defined for successful
# generation (suggested values are also provided):
#   ENVPATHWIN = C:\Users\Uporabnik\Documents\MyDoc.md
#   ENVPATHUNIX = /home/uporabnik/doc/MyDoc.md
#   ENVSIMPLE = EnvSimpleValue
#   ENVLONGER = Value ot the environment variable (longer)
# The following user-provided variables need to be defined:
#   MyVarSimple = NorthEast
#   MyVarLong = '  This is a longer "str", \ used to demonstrate composed filters.  '
#   PathWin = C:\Program Files (x86)\Microsoft SQL Server\
#   PathUnix = ~/doc/MyDoc.md
#   DirtyRelativePath = "../.\.\.//../users//\\/aa/./x.xml"
#   DirtyAbsolutePath = "C:\users\\Uporabnik/.//..\Uporabnik/doc/\\/Mydoc.dox"
#   EscapedStr = "sq \' dq \`" bsl \\ nl \n cr \r ht \t vt \v bsp \b ff \f null \0 nl \012 A \101 sp \040 ht \x09 Z \x5A ! \x21 weird \x4142 ‚ò∫ \u263A ‚òÉ \u2603 œÄ \u03C0 A \u0041 gothicAhsa êå∞ \U00010330 rocket üöÄ \U0001F680 cat üêà \U0001F408"
#   ForUrlEncoding = "Caf√© M√ºnch√´n!.#.$.&. .'.(.).*.+.,./.:.;.=.?.@.[.]"
#   ForXMLEncoding = "`"Hello & Hoodbye!`"  5 < 6 & 7 > 4  <a id=e55>#e55</a>"


