
# This is an example template file that can be processed by using the template
# expansion script "ExpandTemplate.ps1" (a simple template engine).
# In this file, line comments starting with # are used in order to provide 
# some context information.
# The file contains various kinds of placeholders, which can be understood and
# are substituted by the template engine to generate the text file (named as
# the current file, but without the .tmpl extension).
# This template file contain various kinds of placeholders (to substitute 
# environment variables or user-provided variables in form of user variables
# (i.e., key-value pairs), with different kinds of filters applied, or without
# filters).
# To generate the text file from this template, you can use PowerShell code 
# snippets provided by Samples_GenerateFileFromTemplate.ps1, which are related
# to this file. 

\{\{  \}\}

# SIMPLE PLACEHOLDERS:

# Simple placeholders to substitute environment variables:
The value of environment variable ENVSIMPLE is {{ env.ENVSIMPLE }}. The path
stored in ENVPATHWIN is:
  {{ env.ENVPATHWIN }}
On the other hand, the path stored in ENVPATHUNIX is:
  {{ env.ENVPATHUNIX }}

# Output values of all variables used:
Environment variables used in this template:
  ENVPATHWIN:  "{{env.ENVPATHWIN}}"
  ENVPATHUNIX: "{{env.ENVPATHUNIX}}"
  ENVSIMPLE:   "{{env.ENVSIMPLE}}"
  ENVLONGER:   "{{env.ENVLONGER}}"
User-provided values (as variables) used in this template:
  MyVarSimple:  "{{var.MyVarSimple}}"
  MyVarLong:    "{{var.MyVarLong}}"
  PathWin:      "{{var.PathWin}}"
  PathUnix:     "{{var.PathUnix}}"

# Simple placeholders to substitute user-provided values (via variables):
The user-provided value of MyVarSimple is {{ var.MyVarSimple }}. The quoted value 
of MyVarLong is: "{{ var.MyVarLong }}"

# PLACEHOLDERS WITH FILTERS to transform values:

# Filter regq replaces " with \" (escapes double quotes).
# Filter regesc replaces " with \" and \ with \\ (escapes double quotes and
# backslashes):
var.PathWin without filters:
  "{{ var.PathWin }}"
with filter "| regesc" applied:
  "{{ var.PathWin | regesc }}"

# HANDLING SPACES AND NEWLINES IN PLACEHOLDERS:

# Spaces and newlines within placeholders should not make any difference. 
# This section tests that this is true.

# Spaces in simple placeholders:

Without spaces:
The value of user-defined variable MyVarSimple: "{{var.MyVarSimple}}"
With space on one side:
The value of user-defined variable MyVarSimple: "{{ var.MyVarSimple}}"
With multiple spaces on both sides: 
The value of user-defined variable MyVarSimple: "{{  var.MyVarSimple   }}"
With newline right after open brackets:
The value of user-defined variable MyVarSimple: "{{
    var.MyVarSimple   }}"
With several newlines:
The value of user-defined variable MyVarSimple: "{{  
    var.MyVarSimple
    }}"






# The following environment variables need to be defined for successful
# generation (suggested values are also provided):
#   ENVPATHWIN = C:\Users\Uporabnik\Documents\MyDoc.md
#   ENVPATHUNIX = /home/uporabnik/doc/MyDoc.md
#   ENVSIMPLE = EnvSimpleValue
#   ENVLONGER = Value ot the environment variable (longer)
# The following user-provided variables need to be defined:
#   MyVarSimple = North
#   MyVarLong = This is a longer variable used to demonstrate composed filters.
#   PathWin = C:\Program Files (x86)\Microsoft SQL Server\
#   PathUnix = ~/doc/MyDoc.md


